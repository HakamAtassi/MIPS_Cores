$date
	Thu Jun  2 03:27:14 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module And $end
$var wire 32 ! SrcA [31:0] $end
$var wire 32 " SrcB [31:0] $end
$var wire 32 # Y [31:0] $end
$upscope $end
$scope module MIPS_Single_Cycle $end
$upscope $end
$scope module Or $end
$var wire 32 $ SrcA [31:0] $end
$var wire 32 % SrcB [31:0] $end
$var wire 32 & Y [31:0] $end
$upscope $end
$scope module testbench $end
$var wire 32 ' writedata [31:0] $end
$var wire 32 ( dataadr [31:0] $end
$var wire 1 ) WE $end
$var reg 1 * clk $end
$var reg 1 + reset $end
$scope module dut $end
$var wire 1 * Clk $end
$var wire 1 + Reset $end
$var wire 32 , WriteData [31:0] $end
$var wire 1 ) WE $end
$var wire 32 - ReadData [31:0] $end
$var wire 32 . PC [31:0] $end
$var wire 32 / Instr [31:0] $end
$var wire 32 0 DataAdr [31:0] $end
$scope module dmem $end
$var wire 32 1 RD [31:0] $end
$var wire 1 * clk $end
$var wire 1 ) WE $end
$var wire 32 2 WD [31:0] $end
$var wire 32 3 A [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 4 A [5:0] $end
$var wire 32 5 RD [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 * Clk $end
$var wire 32 6 Instr [31:0] $end
$var wire 32 7 ReadData [31:0] $end
$var wire 1 + Reset $end
$var wire 1 8 Zero $end
$var wire 32 9 WriteData [31:0] $end
$var wire 1 ) WE $end
$var wire 1 : RegWrite $end
$var wire 1 ; RegDst $end
$var wire 1 < PCSrc $end
$var wire 32 = PC [31:0] $end
$var wire 1 > MemToReg $end
$var wire 1 ? Jump $end
$var wire 1 @ ALUSrc $end
$var wire 32 A ALUOut [31:0] $end
$var wire 3 B ALUControl [2:0] $end
$scope module control $end
$var wire 6 C Funct [5:0] $end
$var wire 6 D Opcode [5:0] $end
$var wire 1 < PCSrc $end
$var wire 1 8 Zero $end
$var wire 1 : RegWrite $end
$var wire 1 ; RegDst $end
$var wire 1 > MemtoReg $end
$var wire 1 ) MemWrite $end
$var wire 1 ? Jump $end
$var wire 1 E Branch $end
$var wire 1 @ ALUSrc $end
$var wire 2 F ALUOp [1:0] $end
$var wire 3 G ALUControl [2:0] $end
$scope module aludec1 $end
$var wire 6 H funct [5:0] $end
$var wire 2 I AluOP [1:0] $end
$var reg 3 J AluControl [2:0] $end
$upscope $end
$scope module md1 $end
$var wire 6 K Opcode [5:0] $end
$var wire 1 : RegWrite $end
$var wire 1 ; RegDst $end
$var wire 1 > MemtoReg $end
$var wire 1 ) MemWrite $end
$var wire 1 ? Jump $end
$var wire 1 E Branch $end
$var wire 1 @ ALUSrc $end
$var wire 2 L ALUOp [1:0] $end
$var reg 9 M controls [8:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 N ALUControl [2:0] $end
$var wire 1 @ ALUSrc $end
$var wire 1 * Clk $end
$var wire 32 O Instr [31:0] $end
$var wire 1 ? Jump $end
$var wire 1 > MemtoReg $end
$var wire 1 < PCSrc $end
$var wire 32 P ReadData [31:0] $end
$var wire 1 ; RegDst $end
$var wire 1 : RegWrite $end
$var wire 1 + Reset $end
$var wire 32 Q SrcA [31:0] $end
$var wire 1 8 Zero $end
$var wire 32 R WriteData [31:0] $end
$var wire 32 S SrcB [31:0] $end
$var wire 32 T SignImmSh [31:0] $end
$var wire 32 U SignImm [31:0] $end
$var wire 32 V Result [31:0] $end
$var wire 5 W RegisterAddress [4:0] $end
$var wire 32 X PCPlus4 [31:0] $end
$var wire 32 Y PCNextbr [31:0] $end
$var wire 32 Z PCNext [31:0] $end
$var wire 32 [ PCBranch [31:0] $end
$var wire 32 \ PC [31:0] $end
$var wire 32 ] ALUOut [31:0] $end
$scope module A3Mux $end
$var wire 5 ^ D0 [4:0] $end
$var wire 5 _ D1 [4:0] $end
$var wire 1 ; sel $end
$var wire 5 ` out [4:0] $end
$upscope $end
$scope module PCRegister $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 32 a D [31:0] $end
$var reg 32 b Q [31:0] $end
$upscope $end
$scope module SRCBmux $end
$var wire 1 @ sel $end
$var wire 32 c out [31:0] $end
$var wire 32 d D1 [31:0] $end
$var wire 32 e D0 [31:0] $end
$upscope $end
$scope module WD3Mux $end
$var wire 32 f D1 [31:0] $end
$var wire 1 > sel $end
$var wire 32 g out [31:0] $end
$var wire 32 h D0 [31:0] $end
$upscope $end
$scope module alu_main $end
$var wire 3 i ALUControl [2:0] $end
$var wire 32 j N0 [31:0] $end
$var wire 32 k N1 [31:0] $end
$var wire 32 l SrcA [31:0] $end
$var wire 32 m SrcB [31:0] $end
$var wire 32 n SrcB_not [31:0] $end
$var wire 32 o mux1_out [31:0] $end
$var wire 32 p N3 [31:0] $end
$var wire 32 q N2 [31:0] $end
$var wire 1 r C_out $end
$var wire 32 s ALUResult [31:0] $end
$var reg 1 8 Zero $end
$scope module add1 $end
$var wire 1 t C_in $end
$var wire 32 u SrcB [31:0] $end
$var wire 32 v Y [31:0] $end
$var wire 32 w SrcA [31:0] $end
$var wire 1 r C_out $end
$upscope $end
$scope module mux1 $end
$var wire 32 x D0 [31:0] $end
$var wire 32 y D1 [31:0] $end
$var wire 1 z sel $end
$var wire 32 { out [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 | D0 [31:0] $end
$var wire 32 } D1 [31:0] $end
$var wire 32 ~ D2 [31:0] $end
$var wire 32 !" D3 [31:0] $end
$var wire 2 "" sel [1:0] $end
$var wire 32 #" out [31:0] $end
$upscope $end
$upscope $end
$scope module immsh $end
$var wire 32 $" shifted_out [31:0] $end
$var wire 32 %" shift_in [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 1 &" C_in $end
$var wire 32 '" SrcA [31:0] $end
$var wire 32 (" SrcB [31:0] $end
$var wire 32 )" Y [31:0] $end
$var wire 1 *" C_out $end
$upscope $end
$scope module pcadd2 $end
$var wire 1 +" C_in $end
$var wire 32 ," SrcA [31:0] $end
$var wire 32 -" SrcB [31:0] $end
$var wire 32 ." Y [31:0] $end
$var wire 1 /" C_out $end
$upscope $end
$scope module pcbrmux $end
$var wire 32 0" D0 [31:0] $end
$var wire 32 1" D1 [31:0] $end
$var wire 1 < sel $end
$var wire 32 2" out [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 3" D0 [31:0] $end
$var wire 32 4" D1 [31:0] $end
$var wire 1 ? sel $end
$var wire 32 5" out [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 6" A1 [4:0] $end
$var wire 5 7" A2 [4:0] $end
$var wire 5 8" A3 [4:0] $end
$var wire 32 9" RD1 [31:0] $end
$var wire 32 :" RD2 [31:0] $end
$var wire 32 ;" WD3 [31:0] $end
$var wire 1 : WE3 $end
$var wire 1 * clk $end
$upscope $end
$scope module se $end
$var wire 16 <" extend [15:0] $end
$var wire 32 =" extended [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 >" i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 >"
b101 ="
b101 <"
bx ;"
bx :"
bx 9"
b10 8"
b10 7"
b0 6"
b100 5"
b10000000000000010100 4"
b100 3"
b100 2"
b11000 1"
b100 0"
0/"
b11000 ."
b100 -"
b10100 ,"
0+"
0*"
b100 )"
b0 ("
b100 '"
0&"
b101 %"
b10100 $"
bx #"
b10 ""
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx !"
bx ~
b0x0x }
b0x0x |
b101 {
0z
b11111111111111111111111111111010 y
b101 x
b101 w
bx v
bx u
0t
bx s
xr
bx q
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx p
b101 o
b11111111111111111111111111111010 n
b101 m
bx l
b0x0x k
b0x0x j
b10 i
bx h
bx g
bx f
bx e
b101 d
b101 c
b0 b
b100 a
b10 `
b0 _
b10 ^
bx ]
b0 \
b11000 [
b100 Z
b100 Y
b100 X
b10 W
bx V
b101 U
b10100 T
b101 S
bx R
bx Q
bx P
b100000000000100000000000000101 O
b10 N
b101000000 M
b0 L
b1000 K
b10 J
b0 I
b101 H
b10 G
b0 F
0E
b1000 D
b101 C
b10 B
bx A
1@
0?
0>
b0 =
0<
0;
1:
bx 9
x8
bx 7
b100000000000100000000000000101 6
b100000000000100000000000000101 5
b0 4
bx 3
bx 2
bx 1
bx 0
b100000000000100000000000000101 /
b0 .
bx -
bx ,
1+
1*
0)
bx (
bx '
bx &
bz %
bz $
bx #
bz "
bz !
$end
#5
0*
#10
1*
b1 >"
#15
0*
#20
1*
b10 >"
#22
0+
#25
0*
#30
b0xx00 k
b0xx00 }
b0xx00 j
b0xx00 |
b11111111111111111111111111110011 n
b11111111111111111111111111110011 y
b1100 o
b1100 w
b1100 {
b1000 Z
b1000 a
b1000 5"
b11 W
b11 `
b11 8"
b110000 T
b110000 $"
b110000 ,"
b1100 S
b1100 c
b1100 m
b1100 x
b111000 [
b111000 ."
b111000 1"
b1000 Y
b1000 2"
b1000 3"
b1100 C
b1100 H
b11000000000000110000 4"
b11 7"
b11 ^
b1100 U
b1100 d
b1100 %"
b1100 ="
b1100 <"
b1000 X
b1000 )"
b1000 -"
b1000 0"
b100000000000110000000000001100 /
b100000000000110000000000001100 5
b100000000000110000000000001100 6
b100000000000110000000000001100 O
b1 4
b100 .
b100 =
b100 \
b100 b
b100 ("
1*
b11 >"
#35
0*
#40
bx0xxx k
bx0xxx }
bx0xxx j
bx0xxx |
b1000 n
b1000 y
b11111111111111111111111111110111 o
b11111111111111111111111111110111 w
b11111111111111111111111111110111 {
b1100 Z
b1100 a
b1100 5"
b111 W
b111 `
b111 8"
b11111111111111111111111111011100 T
b11111111111111111111111111011100 $"
b11111111111111111111111111011100 ,"
b11111111111111111111111111110111 S
b11111111111111111111111111110111 c
b11111111111111111111111111110111 m
b11111111111111111111111111110111 x
b11111111111111111111111111101000 [
b11111111111111111111111111101000 ."
b11111111111111111111111111101000 1"
b1100 Y
b1100 2"
b1100 3"
b110111 C
b110111 H
b1100111111111111111011100 4"
b11 6"
b111 7"
b111 ^
b11 _
b11111111111111111111111111110111 U
b11111111111111111111111111110111 d
b11111111111111111111111111110111 %"
b11111111111111111111111111110111 ="
b1111111111110111 <"
b1100 X
b1100 )"
b1100 -"
b1100 0"
b100000011001111111111111110111 /
b100000011001111111111111110111 5
b100000011001111111111111110111 6
b100000011001111111111111110111 O
b10 4
b1000 .
b1000 =
b1000 \
b1000 b
b1000 ("
1*
b100 >"
#45
0*
#50
1z
1t
b110 B
b110 G
b110 J
b110 N
b110 i
1;
0@
b1 F
b1 I
b1 L
b110000010 M
bx k
bx }
bx j
bx |
bx n
bx y
bx o
bx w
bx {
b10000 Z
b10000 a
b10000 5"
b111 W
b111 `
b111 8"
b1000000010010100 T
b1000000010010100 $"
b1000000010010100 ,"
bx S
bx c
bx m
bx x
b1000000010100100 [
b1000000010100100 ."
b1000000010100100 1"
b10000 Y
b10000 2"
b10000 3"
b0 D
b0 K
b100101 C
b100101 H
b11100010001000000010010100 4"
b111 6"
b10 7"
b10 ^
b111 _
b10000000100101 U
b10000000100101 d
b10000000100101 %"
b10000000100101 ="
b10000000100101 <"
b10000 X
b10000 )"
b10000 -"
b10000 0"
b111000100010000000100101 /
b111000100010000000100101 5
b111000100010000000100101 6
b111000100010000000100101 O
b11 4
b1100 .
b1100 =
b1100 \
b1100 b
b1100 ("
1*
b101 >"
#55
0*
#60
b10100 Z
b10100 a
b10100 5"
b11 W
b11 `
b11 8"
b1010000010010000 T
b1010000010010000 $"
b1010000010010000 ,"
b1010000010100100 [
b1010000010100100 ."
b1010000010100100 1"
b10100 Y
b10100 2"
b10100 3"
b100100 C
b100100 H
b1100100001010000010010000 4"
b11 6"
b100 7"
b100 ^
b11 _
b10100000100100 U
b10100000100100 d
b10100000100100 %"
b10100000100100 ="
b10100000100100 <"
b10100 X
b10100 )"
b10100 -"
b10100 0"
b11001000010100000100100 /
b11001000010100000100100 5
b11001000010100000100100 6
b11001000010100000100100 O
b100 4
b10000 .
b10000 =
b10000 \
b10000 b
b10000 ("
1*
b110 >"
#65
0*
#70
b11000 Z
b11000 a
b11000 5"
b101 W
b101 `
b101 8"
b1010000010000000 T
b1010000010000000 $"
b1010000010000000 ,"
b1010000010011000 [
b1010000010011000 ."
b1010000010011000 1"
b11000 Y
b11000 2"
b11000 3"
b100000 C
b100000 H
b10100100001010000010000000 4"
b101 6"
b101 _
b10100000100000 U
b10100000100000 d
b10100000100000 %"
b10100000100000 ="
b10100000100000 <"
b11000 X
b11000 )"
b11000 -"
b11000 0"
b101001000010100000100000 /
b101001000010100000100000 5
b101001000010100000100000 6
b101001000010100000100000 O
b101 4
b10100 .
b10100 =
b10100 \
b10100 b
b10100 ("
1*
b111 >"
#75
0*
#80
0z
0t
b10 B
b10 G
b10 J
b10 N
b10 i
b111 W
b111 `
b111 8"
x<
0:
0;
1E
b0 F
b0 I
b0 L
1?
b100001 M
b10100111000000000000101000 Z
b10100111000000000000101000 a
b10100111000000000000101000 5"
b101000 T
b101000 $"
b101000 ,"
b1000100 [
b1000100 ."
b1000100 1"
b0x0xx100 Y
b0x0xx100 2"
b0x0xx100 3"
b100 D
b100 K
b1010 C
b1010 H
b10100111000000000000101000 4"
b111 7"
b111 ^
b1010 U
b1010 d
b1010 %"
b1010 ="
b1010 <"
b11100 X
b11100 )"
b11100 -"
b11100 0"
b10000101001110000000000001010 /
b10000101001110000000000001010 5
b10000101001110000000000001010 6
b10000101001110000000000001010 O
b110 4
b11000 .
b11000 =
b11000 \
b11000 b
b11000 ("
1*
b1000 >"
#85
0*
#90
1z
1t
b110 B
b110 G
b110 J
b110 N
b110 i
0<
1:
1;
0E
b1 F
b1 I
b1 L
0?
b110000010 M
b10100111000000000000101100 Z
b10100111000000000000101100 a
b10100111000000000000101100 5"
b111 W
b111 `
b111 8"
b1000000010101000 T
b1000000010101000 $"
b1000000010101000 ,"
b10100111001000000011010100 [
b10100111001000000011010100 ."
b10100111001000000011010100 1"
b10100111000000000000101100 Y
b10100111000000000000101100 2"
b10100111000000000000101100 3"
b0 D
b0 K
b101010 C
b101010 H
b11100010001000000010101000 4"
b111 6"
b10 7"
b10 ^
b111 _
b10000000101010 U
b10000000101010 d
b10000000101010 %"
b10000000101010 ="
b10000000101010 <"
b10100111000000000000101100 X
b10100111000000000000101100 )"
b10100111000000000000101100 -"
b10100111000000000000101100 0"
b111000100010000000101010 /
b111000100010000000101010 5
b111000100010000000101010 6
b111000100010000000101010 O
b1010 4
b10100111000000000000101000 .
b10100111000000000000101000 =
b10100111000000000000101000 \
b10100111000000000000101000 b
b10100111000000000000101000 ("
1*
b1001 >"
#95
0*
#100
b10100111000000000000110000 Z
b10100111000000000000110000 a
b10100111000000000000110000 5"
b100 W
b100 `
b100 8"
b1110000010000000 T
b1110000010000000 $"
b1110000010000000 ,"
b10100111001110000010110000 [
b10100111001110000010110000 ."
b10100111001110000010110000 1"
b10100111000000000000110000 Y
b10100111000000000000110000 2"
b10100111000000000000110000 3"
b100000 C
b100000 H
b10000101001110000010000000 4"
b100 6"
b101 7"
b101 ^
b100 _
b11100000100000 U
b11100000100000 d
b11100000100000 %"
b11100000100000 ="
b11100000100000 <"
b10100111000000000000110000 X
b10100111000000000000110000 )"
b10100111000000000000110000 -"
b10100111000000000000110000 0"
b100001010011100000100000 /
b100001010011100000100000 5
b100001010011100000100000 6
b100001010011100000100000 O
b1011 4
b10100111000000000000101100 .
b10100111000000000000101100 =
b10100111000000000000101100 \
b10100111000000000000101100 b
b10100111000000000000101100 ("
1*
b1010 >"
#105
0*
#110
b10100111000000000000110100 Z
b10100111000000000000110100 a
b10100111000000000000110100 5"
b111 W
b111 `
b111 8"
b1110000010001000 T
b1110000010001000 $"
b1110000010001000 ,"
b10100111001110000010111100 [
b10100111001110000010111100 ."
b10100111001110000010111100 1"
b10100111000000000000110100 Y
b10100111000000000000110100 2"
b10100111000000000000110100 3"
b100010 C
b100010 H
b11100010001110000010001000 4"
b111 6"
b10 7"
b10 ^
b111 _
b11100000100010 U
b11100000100010 d
b11100000100010 %"
b11100000100010 ="
b11100000100010 <"
b10100111000000000000110100 X
b10100111000000000000110100 )"
b10100111000000000000110100 -"
b10100111000000000000110100 0"
b111000100011100000100010 /
b111000100011100000100010 5
b111000100011100000100010 6
b111000100011100000100010 O
b1100 4
b10100111000000000000110000 .
b10100111000000000000110000 =
b10100111000000000000110000 \
b10100111000000000000110000 b
b10100111000000000000110000 ("
1*
b1011 >"
#115
0*
#120
0z
0t
b10 B
b10 G
b10 J
b10 N
b10 i
b0x000x00 k
b0x000x00 }
b0x000x00 j
b0x000x00 |
b1000100 o
b1000100 w
b1000100 {
b11111111111111111111111110111011 n
b11111111111111111111111110111011 y
b1000100 S
b1000100 c
b1000100 m
b1000100 x
0:
0;
1@
1)
b0 F
b0 I
b0 L
b1010000 M
b10100111000000000000111000 Z
b10100111000000000000111000 a
b10100111000000000000111000 5"
b111 W
b111 `
b111 8"
b100010000 T
b100010000 $"
b100010000 ,"
b10100111000000000101001000 [
b10100111000000000101001000 ."
b10100111000000000101001000 1"
b10100111000000000000111000 Y
b10100111000000000000111000 2"
b10100111000000000000111000 3"
b101011 D
b101011 K
b100 C
b100 H
b1100111000000000100010000 4"
b11 6"
b111 7"
b111 ^
b11 _
b1000100 U
b1000100 d
b1000100 %"
b1000100 ="
b1000100 <"
b10100111000000000000111000 X
b10100111000000000000111000 )"
b10100111000000000000111000 -"
b10100111000000000000111000 0"
b10101100011001110000000001000100 /
b10101100011001110000000001000100 5
b10101100011001110000000001000100 6
b10101100011001110000000001000100 O
b1101 4
b10100111000000000000110100 .
b10100111000000000000110100 =
b10100111000000000000110100 \
b10100111000000000000110100 b
b10100111000000000000110100 ("
1*
b1100 >"
#125
